{"version":3,"sources":["serviceWorker.ts","api/types.ts","api/todolists-api.ts","features/CommonActtions/ApplicationCommonActions.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","utils/redux-utils.ts","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/Auth/selectors.ts","features/TodolistsList/Todolist/selectors.ts","features/TodolistsList/Todolist/Task/selectors.ts","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.tsx","app/selectors.ts","features/Auth/auth-reducer.ts","features/Application/application-reducer.ts","features/Application/index.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Auth/Login.tsx","features/Auth/index.tsx","app/App.tsx","app/reducers.ts","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","setAppStatus","createAction","setAppError","handleAsyncServerAppError","thunkAPI","showError","dispatch","error","messages","length","status","rejectWithValue","errors","fieldsError","fieldsErrors","handleAsyncServerNetworkError","message","undefined","slice","createSlice","name","initialState","reducers","changeTodolistFilterAC","state","action","index","findIndex","tl","payload","filter","changeTodolistEntityStatusAC","entityStatus","extraReducers","builder","addCase","fetchTodolistsTC","fulfilled","todolists","map","removeTodolistTC","splice","addTodolistTC","unshift","changeTodolistTitleTC","actions","createAsyncThunk","arg","a","res","param","resultCode","item","asyncActions","asyncTodoActions","forEach","fetchTasksTC","tasks","removeTaskTC","task","t","addTaskTC","todoListId","updateTaskTC","items","getState","find","apiModel","deadline","description","priority","startDate","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","style","marginLeft","AddBox","EditableSpan","props","console","log","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","useAppDispatch","useDispatch","useAppSelector","useSelector","useActions","useMemo","bindActionCreators","Task","tasksActions","onClickHandler","useCallback","onChangeHandler","checked","Completed","New","onTitleChangeHandler","newValue","position","key","className","Checkbox","size","top","right","Delete","fontSize","Todolist","demo","todolistsActions","useEffect","todolist","addTaskCallback","helper","thunk","resultAction","rejected","errorMessage","changeTodolistTitle","onFilterButtonClickHandler","tasksForTodolist","renderFilterButton","buttonFilter","text","Button","Paper","padding","paddingTop","selectIsLoggedIn","auth","isLoggedIn","selectTodolists","selectTasks","TodolistsList","addTodolist","Grid","container","spacing","flexWrap","overflowX","allTodolistTasks","width","to","todolistsAsyncActions","todolistSlice","todolistsReducer","reducer","tasksAsyncActions","tasksSlice","tasksReducer","selectStatus","app","selectIsInitialized","isInitialized","setIsLoggedIn","login","logout","initializeApp","appReducer","appSlice","appActions","Alert","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","authActions","setFieldError","field","justifyContent","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","type","FormControlLabel","control","authReducer","App","authSelectors","logoutHandler","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9d6b0928.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Application is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string, error: string };\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}","import axios from 'axios'\r\nimport {GetTasksResponse, LoginParamsType, ResponseType, TaskType, TodolistType, UpdateTaskModelType} from './types';\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '066ae431-6115-49fc-b06c-595e5096a36d'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{ userId?: number }>>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number; email: string; login: string }>>('auth/me')\r\n    }\r\n}\r\n\r\n","import {createAction} from '@reduxjs/toolkit';\r\nimport {RequestStatusType} from '../Application/application-reducer';\r\n\r\nexport const setAppStatus = createAction<{ status: RequestStatusType }>('application/setAppStatus')\r\n\r\nexport const setAppError = createAction<{ error: string | null }>('application/setAppError')","import {AxiosError} from 'axios';\r\nimport {ResponseType} from '../api/types';\r\nimport {setAppError, setAppStatus} from '../features/CommonActtions/ApplicationCommonActions';\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>, thunkAPI: any, showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsError: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError, thunkAPI: any, showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsError: undefined})\r\n}","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {RequestStatusType} from '../Application'\r\nimport {\r\n    handleAsyncServerAppError,\r\n    handleAsyncServerNetworkError,\r\n} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\nimport {ThunkError} from '../../utils/types';\r\nimport {TodolistType} from '../../api/types';\r\nimport {setAppStatus} from '../CommonActtions/ApplicationCommonActions';\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilterAC: (state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].filter = action.payload.filter\r\n            }\r\n        },\r\n        changeTodolistEntityStatusAC: (state, action: PayloadAction<{ id: string, status: RequestStatusType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].entityStatus = action.payload.status\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({\r\n                ...tl,\r\n                filter: 'all',\r\n                entityStatus: 'idle'\r\n            }))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].title = action.payload.title\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\n//export const todolistsReducer = slice.reducer\r\nexport const {changeTodolistFilterAC, changeTodolistEntityStatusAC} = slice.actions\r\n\r\n// thunks\r\nconst fetchTodolistsTC = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>('todolists/fetchTodolists', async (arg, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    const res = await todolistsAPI.getTodolists()\r\n    try {\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        return handleAsyncServerNetworkError(error, thunkAPI);\r\n    }\r\n})\r\nconst changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: { id: string, title: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {id: param.id, title: param.title}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI);\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst removeTodolistTC = createAsyncThunk('todolists/removeTodolist', async (todolistId: string, {dispatch}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    await todolistsAPI.deleteTodolist(todolistId)\r\n    dispatch(setAppStatus({status: 'succeeded'}))\r\n    return {todolistId}\r\n})\r\n\r\nconst addTodolistTC = createAsyncThunk<TodolistType, string, ThunkError>\r\n('todolists/addTodolist', async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return res.data.data.item\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false);\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\n\r\nexport const asyncActions = {\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC\r\n}\r\n\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {\r\n    handleAsyncServerAppError,\r\n    handleAsyncServerNetworkError,\r\n} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\nimport {asyncActions as asyncTodoActions} from './todolists-reducer';\r\nimport {AppRootStateType, ThunkError} from '../../utils/types';\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    UpdateTaskModelType\r\n} from '../../api/types';\r\nimport {setAppStatus} from '../CommonActtions/ApplicationCommonActions';\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(asyncTodoActions.addTodolistTC.fulfilled, (state, action) => {\r\n                state[action.payload.id] = []\r\n            })\r\n            .addCase(asyncTodoActions.removeTodolistTC.fulfilled, (state, action) => {\r\n                delete state[action.payload.todolistId]\r\n            })\r\n            .addCase(asyncTodoActions.fetchTodolistsTC.fulfilled, ((state, action) => {\r\n                action.payload.todolists.forEach(tl => state[tl.id] = [])\r\n            }))\r\n            .addCase(fetchTasksTC.fulfilled, ((state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            }))\r\n            .addCase(removeTaskTC.fulfilled, ((state, action) => {\r\n                const task = state[action.payload.todolistId]\r\n                const index = task.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    task.splice(index, 1)\r\n                }\r\n            }))\r\n            .addCase(addTaskTC.fulfilled, ((state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            }))\r\n            .addCase(updateTaskTC.fulfilled, ((state, action) => {\r\n                const task = state[action.payload.todolistId]\r\n                const index = task.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    task[index] = {...task[index], ...action.payload.model}\r\n                }\r\n            }))\r\n    }\r\n})\r\n\r\n//export const tasksReducer = slice.reducer\r\n\r\n// thunks\r\nconst fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, {dispatch}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    const res = await todolistsAPI.getTasks(todolistId)\r\n    const tasks = res.data.items\r\n    dispatch(setAppStatus({status: 'succeeded'}))\r\n    return {tasks, todolistId}\r\n\r\n})\r\nconst removeTaskTC = createAsyncThunk('tasks/removeTask', async (param: { taskId: string, todolistId: string }) => {\r\n    await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n    return {taskId: param.taskId, todolistId: param.todolistId}\r\n})\r\n\r\nconst addTaskTC = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>\r\n('tasks/addTask', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return res.data.data.item\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false);\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\n\r\nconst updateTaskTC = createAsyncThunk('task/updateTask', async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }, thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI);\r\n\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        return handleAsyncServerNetworkError(error, thunkAPI);\r\n    }\r\n})\r\n\r\nexport const asyncActions = {fetchTasksTC, removeTaskTC, addTaskTC, updateTaskTC}\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormSubmitHelpersType = {\r\n    setError: (error: string) => void\r\n    setTitle: (title: string) => void\r\n}\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelpersType) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title, {setTitle, setError});\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\"\r\n                    onClick={addItemHandler}\r\n                    disabled={disabled}\r\n                    style={{marginLeft: '5px'}}\r\n        >\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\r\nimport {ActionCreatorsMapObject} from '@reduxjs/toolkit';\r\nimport {useMemo} from 'react';\r\nimport {bindActionCreators} from 'redux';\r\nimport {AppDispatch, AppRootStateType} from './types';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\nexport const useActions = <T extends ActionCreatorsMapObject<any>>(actions: T) => {\r\n    const dispatch = useDispatch()\r\n\r\n    return useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n\r\n    }, [actions, dispatch])\r\n}","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {tasksActions} from '../../index';\r\nimport {useActions} from '../../../../utils/redux-utils';\r\nimport {TaskStatuses, TaskType} from '../../../../api/types';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {removeTaskTC, updateTaskTC} = useActions(tasksActions)\r\n\r\n    const onClickHandler = useCallback(() => removeTaskTC({taskId: props.task.id, todolistId: props.todolistId}),\r\n        [props.task.id, props.todolistId, removeTaskTC]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTaskTC({\r\n            taskId: props.task.id,\r\n            model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId, updateTaskTC]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        updateTaskTC({taskId: props.task.id, model: {title: newValue}, todolistId: props.todolistId})\r\n    }, [props.task.id, props.todolistId, updateTaskTC]);\r\n\r\n    return <div style={{position: 'relative'}} key={props.task.id}\r\n                className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton  size={'small'} onClick={onClickHandler} style={{position: 'absolute', top: '5px', right: '5px'}}>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm, AddItemFormSubmitHelpersType} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton, Paper, PropTypes} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {tasksActions, todolistsActions} from '../index';\r\nimport {useActions, useAppDispatch} from '../../../utils/redux-utils';\r\nimport {TaskStatuses, TaskType} from '../../../api/types';\r\n\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n    const {fetchTasksTC} = useActions(tasksActions)\r\n    const {removeTodolistTC, changeTodolistTitleTC, changeTodolistFilterAC} = useActions(todolistsActions)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        if (!props.tasks.length) {\r\n            fetchTasksTC(props.todolist.id)\r\n        }\r\n    }, [demo, fetchTasksTC, props.tasks.length, props.todolist.id])\r\n\r\n    const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelpersType) => {\r\n        let thunk = tasksActions.addTaskTC({title, todolistId: props.todolist.id})\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (tasksActions.addTaskTC.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [dispatch, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        removeTodolistTC(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        changeTodolistTitleTC({id: props.todolist.id, title})\r\n    }, [changeTodolistTitleTC, props.todolist.id])\r\n\r\n    const onFilterButtonClickHandler = useCallback((filter: FilterValuesType) => {\r\n        changeTodolistFilterAC({filter: filter, id: props.todolist.id})\r\n    }, [changeTodolistFilterAC, props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    const renderFilterButton = (buttonFilter: FilterValuesType, color: PropTypes.Color, text: string) => {\r\n        return <Button variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\r\n                       onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                       color={color}\r\n        >{text}\r\n        </Button>\r\n    }\r\n\r\n    return <Paper style={{position: 'relative', padding: '10px'}}>\r\n        <IconButton size={'small'}\r\n                    onClick={removeTodolist}\r\n                    disabled={props.todolist.entityStatus === 'loading'}\r\n                    style={{position: 'absolute', right: '5px', top: '5px'}}\r\n        >\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n            }\r\n            {\r\n                !tasksForTodolist.length && <div style={{padding: '10px', color: 'grey'}}>Create your first task!</div>\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            {renderFilterButton('all', 'default', 'All')}\r\n            {renderFilterButton('active', 'primary', 'Active')}\r\n            {renderFilterButton('completed', 'secondary', 'Completed')}\r\n        </div>\r\n    </Paper>\r\n})\r\n\r\n\r\n","import {AppRootStateType} from '../../utils/types';\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn","import {AppRootStateType} from '../../../utils/types';\r\n\r\nexport const selectTodolists = (state: AppRootStateType) => state.todolists","import {AppRootStateType} from '../../../../utils/types';\r\n\r\nexport const selectTasks = (state: AppRootStateType) => state.tasks","import React, {useCallback, useEffect} from 'react'\r\nimport {Grid} from '@material-ui/core'\r\nimport {AddItemForm, AddItemFormSubmitHelpersType} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from '../Auth/selectors';\r\nimport {selectTodolists} from './Todolist/selectors';\r\nimport {selectTasks} from './Todolist/Task/selectors';\r\nimport {todolistsActions} from './index';\r\nimport {useActions, useAppDispatch, useAppSelector} from '../../utils/redux-utils';\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useAppSelector(selectTodolists)\r\n    const tasks = useAppSelector(selectTasks)\r\n    const isLoggedIn = useAppSelector(selectIsLoggedIn)\r\n    const {fetchTodolistsTC} = useActions(todolistsActions)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        if(!todolists.length){\r\n            fetchTodolistsTC()\r\n        }\r\n    }, [demo, fetchTodolistsTC, isLoggedIn, todolists.length])\r\n\r\n\r\n    const addTodolist = useCallback(async (title: string, helper: AddItemFormSubmitHelpersType) => {\r\n        let thunk = todolistsActions.addTodolistTC(title)\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (todolistsActions.addTodolistTC.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap', overflowX: 'scroll'}}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <div style={{width: '300px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {asyncActions as tasksAsyncActions, slice as tasksSlice} from './tasks-reducer';\r\nimport {asyncActions as todolistsAsyncActions, slice as todolistSlice} from './todolists-reducer';\r\nimport {TodolistsList} from './TodolistsList'\r\n\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...todolistSlice.actions\r\n}\r\nconst todolistsReducer = todolistSlice.reducer\r\n\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n}\r\nconst tasksReducer = tasksSlice.reducer\r\n\r\n\r\nexport {\r\n    tasksActions,\r\n    todolistsActions,\r\n    TodolistsList,\r\n    todolistsReducer,\r\n    tasksReducer\r\n}","import {AppRootStateType} from '../utils/types';\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized","import {authAPI} from '../../api/todolists-api'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\nimport {FieldErrorType, LoginParamsType} from '../../api/types';\r\nimport {setAppStatus} from '../CommonActtions/ApplicationCommonActions';\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils';\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn: (state, action: PayloadAction<{ value: boolean }>) => {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(login.fulfilled, ((state) => {\r\n                state.isLoggedIn = true\r\n            }))\r\n            .addCase(logout.fulfilled, ((state) => {\r\n                state.isLoggedIn = false\r\n            }))\r\n    }\r\n})\r\n\r\n//export const authReducer = slice.reducer\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n// thunks\r\nexport const login = createAsyncThunk<undefined, LoginParamsType, { rejectValue: { errors: Array<string>, fieldsError?: Array<FieldErrorType> } }>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    const res = await authAPI.login(param)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n\r\n    }\r\n})\r\nexport const logout = createAsyncThunk('auth/logout', async (arg, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    const res = await authAPI.logout()\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n\r\n    }\r\n})\r\n\r\nexport const asyncActions = {login, logout}\r\n\r\n","import {authAPI} from '../../api/todolists-api'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\nimport {setIsLoggedIn} from '../Auth/auth-reducer';\r\nimport {setAppError, setAppStatus} from '../CommonActtions/ApplicationCommonActions';\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils';\r\n\r\nexport const slice = createSlice({\r\n    name: 'application',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(initializeApp.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        })\r\n            .addCase(setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n})\r\n\r\n//export const appReducer = slice.reducer\r\n//export const {setAppStatus, setAppError} = slice.actions\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n//thunk\r\nconst initializeApp = createAsyncThunk('application/initializeApp', async (arg, thunkAPI) => {\r\n    const res = await authAPI.me()\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setIsLoggedIn({value: true}));\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI);\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\n","import * as appSelectors from '../../app/selectors'\r\nimport {asyncActions, RequestStatusType as T1, slice as appSlice} from './application-reducer';\r\nimport {setAppError, setAppStatus} from '../CommonActtions/ApplicationCommonActions'\r\n\r\nconst appReducer = appSlice.reducer\r\n\r\nconst actions = {setAppStatus, setAppError}\r\n\r\nconst appActions = {\r\n    ...actions,\r\n    ...asyncActions\r\n}\r\n\r\nexport type RequestStatusType = T1\r\n\r\nexport {\r\n    appActions,\r\n    appSelectors,\r\n    appReducer,\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from '../../features/Application'\r\nimport {AppRootStateType} from '../../utils/types';\r\nimport {useActions} from '../../utils/redux-utils';\r\n\r\n\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const {setAppError} = useActions(appActions)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setAppError({error: null})\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from './selectors';\r\nimport {authActions} from './index';\r\nimport {useAppDispatch, useAppSelector} from '../../utils/redux-utils';\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useAppSelector(selectIsLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const action = await dispatch(authActions.login(values));\r\n\r\n            if (authActions.login.rejected.match(action)) {\r\n                if (action.payload?.fieldsError?.length) {\r\n                    const error = action.payload.fieldsError[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n    return <Grid container justifyContent=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'} rel=\"noopener noreferrer\">here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as authSelectors from './selectors'\r\nimport {Login} from './Login'\r\nimport {asyncActions, slice} from './auth-reducer';\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions,\r\n    authReducer,\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {appActions} from '../features/Application/'\r\nimport {Route} from 'react-router-dom'\r\nimport {authActions, authSelectors, Login} from '../features/Auth';\r\nimport {selectIsInitialized, selectStatus} from './selectors';\r\nimport {useActions, useAppSelector} from '../utils/redux-utils';\r\n\r\n\r\nfunction App() {\r\n    const status = useAppSelector(selectStatus)\r\n    const isInitialized = useAppSelector(selectIsInitialized)\r\n    const isLoggedIn = useAppSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(appActions)\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            initializeApp()\r\n        }\r\n    }, [initializeApp, isLoggedIn])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        logout()\r\n    }, [logout])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Route exact path={'/'} render={() => <TodolistsList demo={false}/>}/>\r\n                <Route path={'/login'} render={() => <Login/>}/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {combineReducers} from '@reduxjs/toolkit';\r\nimport {appReducer} from '../features/Application';\r\nimport {authReducer} from '../features/Auth';\r\nimport {tasksReducer, todolistsReducer} from '../features/TodolistsList';\r\n\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n})","import {configureStore} from '@reduxjs/toolkit';\r\nimport {rootReducer} from './reducers';\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer\r\n})\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n    module.hot.accept('./reducers', () => store.replaceReducer(rootReducer))\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nconst rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>, document.getElementById('root'));\r\n}\r\n\r\nrerenderEntireTree()\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n    module.hot.accept('./app/App', () => rerenderEntireTree())\r\n}\r\n\r\n"],"sourceRoot":""}