{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/store.ts","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","loginTC","fulfilled","logoutTC","authReducer","reducer","actions","createAsyncThunk","param","a","rejectWithValue","res","resultCode","errors","fieldsError","fieldsErrors","undefined","arg","isInitialized","initializeAppTC","appReducer","changeTodolistFilterAC","index","findIndex","tl","filter","changeTodolistEntityStatusAC","entityStatus","fetchTodolistsTC","todolists","map","removeTodolistTC","splice","addTodolistTC","unshift","changeTodolistTitleTC","todolistsReducer","item","tasksReducer","forEach","fetchTasksTC","tasks","removeTaskTC","task","t","addTaskTC","todoListId","updateTaskTC","items","getState","find","apiModel","deadline","description","priority","startDate","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","changeStatus","newTitle","addTodolist","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","rejected","setFieldError","field","justifyContent","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.97827a92.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '066ae431-6115-49fc-b06c-595e5096a36d'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{ userId?: number }>>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number; email: string; login: string }>>('auth/me')\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type FieldErrorType = { field: string, error: string };\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, setAppStatusAC,} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, FieldErrorType, LoginParamsType} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC: (state, action: PayloadAction<{ value: boolean }>) => {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(loginTC.fulfilled, ((state) => {\r\n            state.isLoggedIn = true\r\n        }))\r\n        builder.addCase(logoutTC.fulfilled, ((state) => {\r\n            state.isLoggedIn = false\r\n        }))\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n// thunks\r\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType, { rejectValue: { errors: Array<string>, fieldsError?: Array<FieldErrorType> } }>('auth/login', async (param, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await authAPI.login(param)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({errors: res.data.messages, fieldsError: res.data.fieldsErrors})\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({errors: [error.message], fieldsError: undefined})\r\n    }\r\n})\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (arg, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await authAPI.logout()\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\n\r\n\r\n","import {authAPI} from '../api/todolists-api'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\nimport {AxiosError} from 'axios';\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n            state.error = action.payload.error\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setAppErrorAC} = slice.actions\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n//thunk\r\nexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (arg, {dispatch, rejectWithValue}) => {\r\n    const res = await authAPI.me()\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilterAC: (state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].filter = action.payload.filter\r\n            }\r\n        },\r\n        changeTodolistEntityStatusAC: (state, action: PayloadAction<{ id: string, status: RequestStatusType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].entityStatus = action.payload.status\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].title = action.payload.title\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC,\r\n} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = createAsyncThunk('todolists/fetchTodolists', async (arg, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.getTodolists()\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, dispatch);\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\nexport const removeTodolistTC = createAsyncThunk('todolists/removeTodolist', async (todolistId: string, {dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    await todolistsAPI.deleteTodolist(todolistId)\r\n    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {todolistId}\r\n})\r\nexport const addTodolistTC = createAsyncThunk('todolists/addTodolist', async (title: string, {dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.createTodolist(title)\r\n    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return res.data.data.item\r\n})\r\nexport const changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: { id: string, title: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {id: param.id, title: param.title}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n","import {addTodolistTC, fetchTodolistsTC, removeTodolistTC} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.id] = []\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        })\r\n        builder.addCase(fetchTodolistsTC.fulfilled, ((state, action) => {\r\n            action.payload.todolists.forEach(tl => state[tl.id] = [])\r\n        }))\r\n        builder.addCase(fetchTasksTC.fulfilled, ((state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        }))\r\n        builder.addCase(removeTaskTC.fulfilled, ((state, action) => {\r\n            const task = state[action.payload.todolistId]\r\n            const index = task.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                task.splice(index, 1)\r\n            }\r\n        }))\r\n        builder.addCase(addTaskTC.fulfilled, ((state, action) => {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        }))\r\n        builder.addCase(updateTaskTC.fulfilled, ((state, action) => {\r\n            const task = state[action.payload.todolistId]\r\n            const index = task.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                task[index] = {...task[index], ...action.payload.model}\r\n            }\r\n        }))\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// thunks\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, {dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.getTasks(todolistId)\r\n    const tasks = res.data.items\r\n    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {tasks, todolistId}\r\n\r\n})\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask', async (param: { taskId: string, todolistId: string }) => {\r\n    await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n    return {taskId: param.taskId, todolistId: param.todolistId}\r\n})\r\nexport const addTaskTC = createAsyncThunk('tasks/addTask', async (param: { title: string, todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            const task = res.data.data.item\r\n            return {task}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\nexport const updateTaskTC = createAsyncThunk('task/updateTask', async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }, {\r\n    dispatch, getState, rejectWithValue\r\n}) => {\r\n    const state = getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return rejectWithValue('task not found in the state')\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, dispatch);\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [demo, dispatch, isLoggedIn])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId: id, model:{status},todolistId:todolistId})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId:id, model:{title: newTitle}, todolistId:todolistId})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC({id, title})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error:null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\nimport {configureStore} from '@reduxjs/toolkit';\r\nimport {useDispatch} from 'react-redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type RootReducerType = typeof rootReducer\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\n\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport {useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType, useAppDispatch} from '../../app/store'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const action = await dispatch(loginTC(values));\r\n\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsError?.length) {\r\n                    const error = action.payload.fieldsError[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n    return <Grid container justifyContent=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {Route} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            dispatch(initializeAppTC())\r\n        }\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                <Route path={'/login'} render={() => <Login/>}/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}